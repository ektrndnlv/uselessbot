import discord
import json
import requests
import datetime
import random


class PyBot:
    settings = {
        'API': 'https://some-random-api.ml/',
    }
    client = discord.Client()
    commands_hot_phrases = [
        {'words': ['—Å–º–µ—à–Ω–æ', '—Ö–∞—Ä–æ—à', '—Ä–æ—Ñ–ª', '–∞—Ö–∞—Ö', '–∞–Ω–µ–∫–¥–æ—Ç'], 'action': 'edit', 'payload': 'joke'},
        {'words': ['–∞–Ω–∏–º–µ', '—Ç—è–Ω'], 'action': 'image', 'payload': 'anime'},
        {'words': ['–Ω–∞–ø–∞–¥–µ–Ω–∏–µ', '–≤—Ç–æ—Ä–∂–µ–Ω–∏–µ', '–±–µ–ª–æ—Ä—É—Å—å'], 'action': 'native_image', 'payload': 'lykash'}
        ]
    last_data = {
        'message': None,
        'user': {id: 0},
    }
    channel = None

    revert_chances = [0,0,0,0,1]

    comment_list = ['—Ä–∞–∑—Ä—ã–≤–Ω–∞—è', '—É –º–µ–Ω—è –æ—Ç —Ç–∞–∫–æ–π —à—É—Ç–∫–∏ –¥–µ–¥ —É–º–µ—Ä', '–∂–æ—Å–∫–∞']
    comment_author = [{'src': 'https://i.ytimg. com/vi/FWnWwZashaQ/maxresdefault.jpg', 'name': '–°–∫–∞–ª–∞ –î–∂–æ–Ω—Å–æ–Ω'},
                      {'src': 'https://i.mycdn.me/i?r=AzEPZsRbOZEKgBhR0XGMT1RkCoIbOC2fWwIzowCUaUzgQaaKTM5SRkZCeTgDn6uOyic', 'name': '–õ—É–∫–∞—à–µ–Ω–∫–æ'}]
    images = {
        'anime': {
            'type': ['wink', 'pat', 'hug'],
            'msg': ['–∞–Ω–∏–º–µ –Ω–∞ –∞–≤–µ, –∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–∞–º–∏ –∑–Ω–∞–µ—Ç–µ...', 'so horny ü§§', '–æ–ø–∞, –ø–æ–ø–∞–ª—Å—è –∞–Ω–∏–º–µ—à–Ω–∏–∫']
        },
    }

    native_images = {
        'lykash': {
            'src': 'https://memepedia.ru/wp-content/uploads/2022/03/lukashenko-mem-a-ja-sejchas-vam-pokazhu-otkuda-gotovilos-napadenie-768x512.jpg',
            'msg': '–Ø —Å–µ–π—á–∞—Å –≤–∞–º –ø–æ–∫–∞–∂—É, –æ—Ç–∫—É–¥–∞ –≥–æ—Ç–æ–≤–∏–ª–æ—Å—å –Ω–∞–ø–∞–¥–µ–Ω–∏–µ...'
        }
    }
#–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–∞
    def __init__(self, **config):
        #–¥–æ—Å—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∫–ª–∏–µ–Ω—Ç –∏–¥
        token, client_id = config.items()
        #–ø—Ä–æ–≤–µ—Ä—è–µ–º, –ï–°–õ–ò –ï–°–¢–¨ –¢–û–ö–ï–ù –ò –ö–õ–ò–ï–ù–¢ –ò–î, –¢–û –ó–ê–ü–ò–°–´–í–ê–ï–ú –ò–• –í –ù–ê–® –ö–õ–ê–°–°
        if token and client_id:
            self.settings['token'] = token[1]
            self.settings['client_id'] = client_id[1]
        else:
            print('Pass token and client_id')

    def __initialize_events__(self):
        print('Initialize client events')
       #—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
        @self.client.event
        async def on_ready():
            print("Initialized at {date}".format(date=datetime.datetime.now()))
        #—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        @self.client.event
        async def on_message(message):
            #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ –æ—Ç –±–æ—Ç–∞
            if not message.author.bot:
                #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                author = message.author
                content = message.content
                self.last_data['message'] = content
                self.last_data['user'] = author
                self.channel = message.channel
                #–≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞
                #—Å–ª–æ–≤–æ
                await self.__action_resolver__(content)

    async def __get_user_by_id__(self, user_id):
        return await self.client.fetch_user(user_id)

    def __get_media__(self, request, with_body=True):
        response = requests.get(self.settings['API'] + request)
        print(response)
        #–µ—Å–ª–∏ 200, —Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
        if response.status_code == 200:
            #–µ—Å–ª–∏ –≤–∏–∑ –±–∞–¥–∏ —Ç—Ä—É, —Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∞, –µ—Å–ª–∏ —Ñ–æ–ª—Å, —Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
            if with_body:
                #–ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                json_data = json.loads(response.text)
                embed = discord.Embed()
                embed.set_image(url=json_data['link'])
                return {'embed': embed, 'file': None}
            else:
                #–ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
                json_data = response.content
                #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä
                open('memes.png', 'wb').write(json_data)
                file = discord.File('memes.png')
                embed = discord.Embed()
                embed.set_image(url="attachment://memes.png")
                return {'embed': embed, 'file': file}
        else:
            return None

    def __message_to_action__(self, message):
        #–ø–æ–ª—É—á–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        for word in message.split():
            #–∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞
            for phrase in self.commands_hot_phrases:
                #–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ñ—Ä–∞–∑, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ
                if word.lower() in phrase['words']:
                    return {'action': phrase['action'], 'payload': phrase['payload']}
        return None

    async def __edit_action__(self, payload):
        request_path = None
        if payload == 'joke':
            author = random.choice(self.comment_author)
            request_path = 'canvas/youtube-comment?avatar={avatar}&comment={comment}&username={username}'.format(
                avatar=author['src'], comment=random.choice(self.comment_list), username=author['name'])
        if request_path:
            edit = self.__get_media__(request_path, False)
            if edit:
                file = edit['file']
                embed = edit['embed']
                await self.channel.send(embed=embed, file=file)
            else:
                await self.channel.send('–ß–æ—Ä—Ç, —Å–∞–Ω–∫—Ü–∏–∏ –Ω–µ –¥–∞–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–¥–µ–ª–∞—Ç—å(')

    async def __image_action__(self, payload):
        request_path = None
        msg = None
        if payload == 'anime':
            request_path = 'animu/{anime}'.format(anime=random.choice(self.images[payload]['type']))
            msg = random.choice(self.images[payload]['msg'])
        if request_path:
            edit = self.__get_media__(request_path)
            embed = edit['embed']
            if edit:
                await self.channel.send(msg, embed=embed)
            else:
                await self.channel.send('–ß–æ—Ä—Ç, —Å–∞–Ω–∫—Ü–∏–∏ –Ω–µ –¥–∞–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–¥–µ–ª–∞—Ç—å(')

    async def __native_image__(self, payload):
        src = self.native_images[payload]['src']
        msg = self.native_images[payload]['msg']
        embed = discord.Embed()
        embed.set_image(url=src)
        await self.channel.send(msg, embed=embed)

    async def __revert_action__(self):
        msg = self.last_data['message']
        user = self.last_data['user']
        if msg and user:
            await self.channel.send('{user} {msg}'.format(msg=msg[::-1], user=user.mention))

    async def __action_resolver__(self, message):
        #—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 1 –∫ 5 –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if random.choice(self.revert_chances):
            await self.__revert_action__()
            #–ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        action_type = self.__message_to_action__(message)
        #–µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏ –∫–∞–Ω–∞–ª, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if action_type and self.channel:
            action = action_type['action']
            payload = action_type['payload']
            if action == 'edit':
                await self.__edit_action__(payload)
            elif action == 'image':
                await self.__image_action__(payload)
            elif action == 'native_image':
                await self.__native_image__(payload)

    def start(self):
        print('Starting bot with client id: {client_id}'.format(client_id=self.settings['client_id']))
        #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–∏—Å–∫–æ—Ä–¥ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∏—Å–æ–º
        self.__initialize_events__()
        #–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        self.client.run(self.settings['token'])


bot = PyBot(
    token="OTgwNDg2Njg4MjU2MTkyNTgy.Gn1lUI.lwPMYkWPvlQnjblYOuhnhGNtGqs1sft99SOTK0",
    client_id=980486688256192582
)
bot.start()
